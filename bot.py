import telebot
from telebot import types
import time
import os

from config import TELEGRAM_API_TOKEN



# –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ñ–µ
CAFE_PHOTO_PATH = 'cafe_photo.jpg'

class Menu:
    def __init__(self):
        self.last_menu = {}

    def create_menu_keyboard(self, callback):
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –º–µ–Ω—é
        markup = types.InlineKeyboardMarkup()






class Messages:
    sent_messages = {}  # –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤—ã—à–µ

    @classmethod
    def save_message_id(cls, user_id, message_id, id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º, —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É."""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in cls.sent_messages:
            cls.sent_messages[user_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º message_id
        cls.sent_messages[user_id][message_id] = id

    @classmethod
    def clear_chat_history(cls, user_id):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ."""
        if user_id in cls.sent_messages:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ message_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            message_ids = list(cls.sent_messages[user_id].keys())

            for message_id in message_ids:
                try:
                    bot.delete_message(user_id, message_id)
                    time.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤ API
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

            # –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
            cls.sent_messages[user_id] = {}

    @classmethod
    def send_new_message(cls, user_id, msg_text, image_url, markup_keys, buttons, id, old_message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç/–∫–∞—Ä—Ç–∏–Ω–∫–∞ + markup_keys
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º, —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
        try:
            if not markup_keys and buttons:
                markup_keys = types.InlineKeyboardMarkup()
                for button in buttons:
                    markup_button = types.InlineKeyboardButton(button["text"], callback_data=button["callback_data"])
                    markup_keys.add(markup_button)

            if not msg_text and old_message and markup_keys: # –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ - –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                bot.edit_message_reply_markup(
                              chat_id=user_id,
                              message_id=old_message.message_id,
                              reply_markup=markup_keys)
                return

            with open(image_url, 'rb') as photo:
                msg = bot.send_photo(
                    user_id,
                    photo,
                    caption=msg_text,
                    reply_markup=markup_keys)
            cls.save_message_id(user_id, msg.message_id, id)
        except (TypeError, FileNotFoundError):
            msg = bot.send_message(
                user_id,
                text=msg_text,
                reply_markup=markup_keys
            )
            cls.save_message_id(user_id, msg.message_id, id)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_API_TOKEN, parse_mode='HTML')

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Menu
menu = Menu()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    send_cafe_menu(message.chat.id)

def send_cafe_menu(chat_id):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –∏–∫–æ–Ω–∫–∞–º–∏
    btn_menu = types.KeyboardButton('üçΩÔ∏è –ú–µ–Ω—é –∫–∞—Ñ–µ')
    btn_cart = types.KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞')
    btn_payment = types.KeyboardButton('üí∞ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞')
    btn_status = types.KeyboardButton('üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
    btn_rating = types.KeyboardButton('‚≠ê –†–µ–π—Ç–∏–Ω–≥')

    markup.add(btn_menu, btn_cart, btn_payment, btn_status, btn_rating)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∫–∞—Ñ–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    with open(CAFE_PHOTO_PATH, 'rb') as photo:
        bot.send_photo(chat_id, photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞—Ñ–µ!", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):





 print("Bot is running...")

bot.polling()